{"ast":null,"code":"import _regeneratorRuntime from \"D:/NU/COMPUTER SCEINCE/Web/realtime-chat-app-vue3-main/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/NU/COMPUTER SCEINCE/Web/realtime-chat-app-vue3-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n// import { io } from \"socket.io-client\";\nimport { ref, onMounted, nextTick } from 'vue';\nimport socket from '../socket';\nvar text = ref('');\nvar messages = ref([]);\nvar messageRef = ref(null);\n\n//socket.join('chatroom');\n// socket.on('chatroom',(data)=>{\n//   console.log(\"SUIIIIIIIIIIIIIIIIIIIIIIIII\");\n// })\n// socket.on(\"send-message\", (data) => {\n//     console.log(\"Client Connected !!!! \", data);\n//     messages.value.push(data.message);\n// });\n\nsocket.on(\"private message\", function (_ref) {\n  var message = _ref.message,\n    from = _ref.from;\n  console.log(\"MEEESAAGE \", from);\n  console.log(\"IDDD \", message);\n  messages.value.push({\n    text: message,\n    sender: from\n  });\n});\nexport default {\n  props: ['userId', 'friendName'],\n  setup: function setup() {\n    return {\n      text: text,\n      messages: messages,\n      messageRef: messageRef\n    };\n  },\n  mounted: function mounted() {\n    console.log(\"SOSOSOSOSOSOSOS\");\n    console.log(\"SOCKET  \", socket.id);\n    console.log(\"USERID \", socket.auth.userId);\n    // console.log(\"USERTOKEN  ==>  \",this.state.userToken);\n    // console.log(\"RECIEVERID  --> \",this.userId);\n\n    fetch(\"http://localhost:3000/chat/messages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.state.userToken\n      },\n      body: JSON.stringify({\n        recieverId: this.userId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      console.log(\"RETURNED MESSAGES  ====>  \");\n      console.log(response);\n      messages.value = response.messages;\n    })[\"catch\"](function (err) {\n      console.log(err);\n    });\n  },\n  methods: {\n    sendMessage: function () {\n      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(message) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              //       const URL = \"http://localhost:3000\";\n              //       const socket = io(URL, { autoConnect: false });\n              //       socket.auth = { userId:this.state.myUserId };\n              //       socket.connect();\n\n              console.log(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffff\", this.state.myUserId);\n              console.log(socket.id);\n              socket.emit(\"private message\", {\n                message: message,\n                to: this.userId,\n                from: this.state.myUserId\n              });\n\n              // fetch(\"http://localhost:3000/chat/send\",{\n              //   method:\"POST\",\n              //   headers:{\n              //     \"Content-Type\":\"application/json\",\n              //     Authorization:\"Bearer \" + this.state.userToken\n              //   },\n              //   body:JSON.stringify({\n              //     message:message2,\n              //     recieverId:this.userId\n              //   })\n              // }).then(res=>{\n              //   return res.json()\n              // }).then(response=>{\n              //     console.log(\"SENT MESSAGE ___ \")\n              //     console.log(response)\n              // }).catch(err=>{\n              //   console.log(err);\n              // });\n\n              messages.value.push({\n                text: message,\n                sender: this.state.myUserId\n              });\n              _context.next = 6;\n              return nextTick();\n            case 6:\n              messageRef.value.scrollTop = messageRef.value.scrollHeight;\n              text.value = '';\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n      return sendMessage;\n    }()\n  }\n};\n\n// TO DO  meesageRef.value.scrollTop = messageRef.value.scrollHeight","map":{"version":3,"names":["ref","onMounted","nextTick","socket","text","messages","messageRef","on","_ref","message","from","console","log","value","push","sender","props","setup","mounted","id","auth","userId","fetch","method","headers","state","userToken","body","JSON","stringify","recieverId","then","res","json","response","err","methods","sendMessage","_sendMessage","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","myUserId","emit","to","scrollTop","scrollHeight","stop","_x","apply","arguments"],"sources":["D:\\NU\\COMPUTER SCEINCE\\Web\\realtime-chat-app-vue3-main\\src\\components\\Chat.vue"],"sourcesContent":["<template>\r\n    <div class=\"panel\">\r\n       <h3> {{ $route.params.friendName }} </h3> \r\n        <div class=\"messages\" ref=\"messageRef\">\r\n             <div class=\"inner\">\r\n               <div v-for=\"(message,index) in messages\" :key=\"index\" class=\"message\">\r\n                  <div v-if=\"message.sender === userId\" class=\"user-self\">\r\n                    {{$route.params.friendName}}:\r\n                  </div>\r\n                  <div v-else class=\"user-them\"> \r\n                    You: \r\n                     \r\n                  </div>\r\n                        {{message.text}}\r\n               </div>\r\n             </div>          \r\n        </div>\r\n    <form>\r\n               <input v-model=\"text\">\r\n               <button @click.prevent=\"sendMessage(text)\">+</button>\r\n             </form>  \r\n      </div>\t\r\n    </template>\r\n    <script>\r\n    // import { io } from \"socket.io-client\";\r\n    import {ref,onMounted,nextTick} from 'vue';\r\n    import socket from '../socket';\r\n    const text = ref('');\r\n    const messages = ref([]);\r\n    const messageRef = ref(null);\r\n    \r\n        \r\n    //socket.join('chatroom');\r\n    // socket.on('chatroom',(data)=>{\r\n    //   console.log(\"SUIIIIIIIIIIIIIIIIIIIIIIIII\");\r\n    // })\r\n    // socket.on(\"send-message\", (data) => {\r\n    //     console.log(\"Client Connected !!!! \", data);\r\n    //     messages.value.push(data.message);\r\n    // });\r\n    \r\n    socket.on(\"private message\", ({ message, from }) => {\r\n      console.log(\"MEEESAAGE \",from);\r\n      console.log(\"IDDD \",message);\r\n          messages.value.push({text:message,sender:from});\r\n    });\r\n    export default {\r\n        props:['userId','friendName'],\r\n        \r\n        setup(){\r\n            return {text,messages,messageRef}\r\n        },\r\n      mounted(){\r\n        console.log(\"SOSOSOSOSOSOSOS\");\r\n        console.log(\"SOCKET  \",socket.id);\r\n        console.log(\"USERID \",socket.auth.userId);\r\n        // console.log(\"USERTOKEN  ==>  \",this.state.userToken);\r\n        // console.log(\"RECIEVERID  --> \",this.userId);\r\n    \r\n        fetch(\"http://localhost:3000/chat/messages\",{\r\n            method:\"POST\",\r\n            headers:{\r\n              \"Content-Type\":\"application/json\",\r\n              \"Authorization\":\"Bearer \" + this.state.userToken\r\n            },\r\n            body:JSON.stringify({\r\n              recieverId:this.userId\r\n            })\r\n          }).then(res=>{\r\n            return res.json()\r\n          }).then(response=>{\r\n              console.log(\"RETURNED MESSAGES  ====>  \")\r\n              console.log(response)\r\n              messages.value = response.messages\r\n          }).catch(err=>{\r\n            console.log(err);\r\n          });\r\n    \r\n      },\r\n        methods:{\t\r\n            sendMessage:async function(message){\r\n    //       const URL = \"http://localhost:3000\";\r\n    //       const socket = io(URL, { autoConnect: false });\r\n    //       socket.auth = { userId:this.state.myUserId };\r\n    //       socket.connect();\r\n          \r\n          console.log(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffff\",this.state.myUserId);\r\n                console.log(socket.id);\r\n          socket.emit(\"private message\", {\r\n            message,\r\n          to: this.userId,\r\n          from:this.state.myUserId\r\n        });\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          // fetch(\"http://localhost:3000/chat/send\",{\r\n          //   method:\"POST\",\r\n          //   headers:{\r\n          //     \"Content-Type\":\"application/json\",\r\n          //     Authorization:\"Bearer \" + this.state.userToken\r\n          //   },\r\n          //   body:JSON.stringify({\r\n          //     message:message2,\r\n          //     recieverId:this.userId\r\n          //   })\r\n          // }).then(res=>{\r\n          //   return res.json()\r\n          // }).then(response=>{\r\n          //     console.log(\"SENT MESSAGE ___ \")\r\n          //     console.log(response)\r\n          // }).catch(err=>{\r\n          //   console.log(err);\r\n          // });\r\n          \r\n                messages.value.push({text:message,sender:this.state.myUserId});\r\n                await nextTick();\r\n                messageRef.value.scrollTop = messageRef.value.scrollHeight;\r\n                text.value = ''\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    // TO DO  meesageRef.value.scrollTop = messageRef.value.scrollHeight\r\n    \r\n    </script>\r\n    \r\n    <style>\r\n        .panel{\r\n      display: flex;\r\n      flex-direction: column;\r\n      padding: 20px;\r\n      margin: 0 auto;\r\n      max-width: 300px;\r\n      height: 300px;\r\n      background: rgba(255,255,255,0.7);\r\n      box-shadow: 0 8px 32px 0 rgba(31,38,135,0.37);\r\n      border-radius: 10px;\r\n      border: 1px solid rgba(188,255,255,0.18);\r\n    }\r\n    .messages{\r\n      height: 100%;\r\n      width: 100%;\r\n      overflow-y: scroll;\r\n      border-top-left-radius: 5px;\r\n      border-top-right-radius: 5px;\r\n      background-color: white;\r\n    }\r\n    .inner{\r\n      padding: 10px;\r\n    }\r\n    \r\n    .message{\r\n      text-align: left;\r\n      display: flex;\r\n      margin-bottom: 6px;\r\n    }\r\n    .user-self{\r\n      color: green;\r\n    }\r\n    .user-them{\r\n      color:red;\r\n    }\r\n    form{\r\n      position: relative;\r\n      display: flex;\r\n    }\r\n    input{\r\n      width: 100%;\r\n      border:none;\r\n      height: 20px;\r\n      padding: 8px;\r\n      border-top: 1px solid #999;\r\n      border-radius: 0px;\r\n      outline: none;\r\n    }\r\n    \r\n    </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}